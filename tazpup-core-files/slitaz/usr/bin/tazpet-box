#!/bin/sh
# pet - Tiny autonomous zone packages manager, hg.slitaz.org/pet
# pet-box - part of pet
# Small GTK boxes to pet for deep desktop integration
# Modified by mistfire for TazPuppy

if [ "$(whoami)" != "root" ]; then
exec subox $0 $@
exit
fi

. /lib/libtaz.sh
export TEXTDOMAIN='pet'
text="<b>$(_ 'Puppy Package Action')</b>"
icon="pet48x"
opts="--window-icon=system-software-install --image=$icon --image-on-top --center --on-top \
--height=150 --width=350 --title=TazPet"

opts2="--window-icon=system-software-install --image=$icon --image-on-top --center --on-top \
--height=300 --width=422 --title=TazPet"

clear_locks(){
rm -f /tmp/tazpkg-local.lock 2>/dev/null
rm -f /tmp/tazpkg-skipdep.lock 2>/dev/null
}

make_locks(){
touch /tmp/tazpkg-local.lock
touch /tmp/tazpkg-skipdep.lock	
}

trap clear_locks EXIT

usage() {
cat <<EOT
$(_ 'Usage:') $(basename $0) [actions|URL] [$(_ 'package')]
 
Examples:
 
$(basename $0) actions /path/to/package-1.0.pet
    display box to extract or install given package
 
$(basename $0) http://example.com/path/to/package-1.0.pet
    download and install given package
EOT
}

output() {
yad --text-info $opts2 --tail --margins='4' --text="$text" --fontname='monospace,10' \
--button='gtk-close:0'
}

actions_main() {
pkgname="${pkg%.pet}"
yad $opts --list --no-headers --dclick-action="echo" --text="$text\n\n$pkg\n\nNOTE: Some Puppy Package requires root access in order to work properly\n\nInstall this package anyway?" \
--button="$(_ 'Install')!package-install:0" \
--button='gtk-cancel:1'
}

actions() {
make_locks
main="$(actions_main)"
case "$?" in
1)
 clear_locks
 exit 0
 ;;
0)
 tazpet "$pkg" --forced --output='raw' --cols=65 | output
 clear_locks
 ;;
esac
rm -f /tmp/petfile.info > /dev/null
}

dl_inst() {
pkg="$(basename $url)"
_ 'Downloading: %s' "$pkg"; newline
WK_DIR=$(mktemp); cd "$WK_DIR"
wget "$url" 2>&1
tazpet -i "$WK_DIR/$pkg" --forced --output='raw' --cols=65 2>&1
rm -f "$WK_DIR"
}

case "$1" in
--help|-h|help|usage|-u)
usage;;
http:*|https:*|ftp:*|ftps:*)
url="$1"
dl_inst | output;;
*)
#[ -z "$2" ] && exit 1


if [ "$(echo "$1" | cut -c 1-3)" != "../" ] && [ "$(echo "$1" | cut -c 1-2)" != "./" ] && [ "$(echo "$1" | cut -c 1)" != "/" ]; then
 xPKG="$(pwd)/$(basename $1)"
elif [ "$(echo "$1" | cut -c 1-2)" == "./" ] || [ "$(echo "$1" | cut -c 1-3)" == "../" ]; then
 xPKG="$(realpath "$1")"
else
 if [ ! -f "$1" ]; then
  xPKG="$(pwd)/$1"
 else
  xPKG="$1"
 fi
fi

pkg="$(basename "$(realpath "${xPKG%% }")")"
echo $pkg
dir="$(dirname "$(realpath "${xPKG%% }")")"
cd "$dir"
actions;;
esac
exit 0
